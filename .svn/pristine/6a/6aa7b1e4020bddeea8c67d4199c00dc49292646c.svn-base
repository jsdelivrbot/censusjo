$(window).load(function () {
    var height = parseInt($(".mapOuter").height()) + 6;

    var strHeight = height + "px";
    $("#map").height(strHeight);

    $('#preloader').delay(350).fadeOut(function(){
        $('body').delay(350).css({'overflow':'visible'});
    });


    SideNavi.init('right', {
        container: '#sideNavi',
        defaultitem: '.side-navi-item-default',
        item: '.side-navi-item',
        data: '.side-navi-data',
        tab: '.side-navi-tab',
        active: '.active'
    });


    $('.scroll-rightSide ').slimScroll({
        wheelStep: 20,
        height: '530px'
    });

    $('.scroll5').slimScroll({
        wheelStep: 20,
        height: '200px'
    });

    $('.scroll6').slimScroll({
        wheelStep: 20,
        height: ' 530px'
    });

    // Menu Toggle
    $('.menutoggle').click(function () {

        var body = $('body');
        var bodypos = body.css('position');

        if (bodypos != 'relative') {

            if (!body.hasClass('leftpanel-collapsed')) {
                body.addClass('leftpanel-collapsed');
                $('.nav-bracket ul').attr('style', '');

                $(this).addClass('menu-collapsed');

            } else {
                body.removeClass('leftpanel-collapsed chat-view');
                $('.nav-bracket li.active ul').css({display: 'block'});

                $(this).removeClass('menu-collapsed');

            }
        } else {

            if (body.hasClass('leftpanel-show'))
                body.removeClass('leftpanel-show');
            else
                body.addClass('leftpanel-show');

            adjustmainpanelheight();
        }

    });
});

function adjustmainpanelheight() {
    // Adjust mainpanel height
    var docHeight = $(document).height();
    if (docHeight > $('.mainpanel').height())
        $('.mainpanel').height(docHeight);
}

String.prototype.format = function (args) {
    var newStr = this;
    for (var key in args) {
        newStr = newStr.split('{' + key + '}').join(args[key]);
    }
    return newStr;
}

function GetBaseMapServerUrl() {
    if (portNo)
        return "http://{ServerIP}:{portNo}/arcgis/rest/services/{MapServerName}/MapServer/".format({
            ServerIP: ServerIP,
            portNo: portNo,
            MapServerName: MapServerName
        });
    else {
        return "http://{ServerIP}/arcgis/rest/services/{MapServerName}/MapServer/".format({
            ServerIP: ServerIP,
            MapServerName: MapServerName
        });
    }
}

function GenerateMapServerUrl(id) {
    if (portNo)
        return "http://{ServerIP}:{portNo}/arcgis/rest/services/{MapServerName}/MapServer/{id}".format({
            ServerIP: ServerIP,
            portNo: portNo,
            MapServerName: MapServerName,
            id: id
        });
    else {
        return "http://{ServerIP}/arcgis/rest/services/{MapServerName}/MapServer/{id}".format({
            ServerIP: ServerIP,
            MapServerName: MapServerName,
            id: id
        });
    }
}

function GetGeometryServiceUrl() {
    if (portNo)
        return "http://{ServerIP}:{portNo}/arcgis/rest/services/{GeometryServicePath}".format({
            ServerIP: ServerIP,
            portNo: portNo,
            GeometryServicePath: GeometryServicePath
        });
    else {
        return "http://{ServerIP}/arcgis/rest/services/{GeometryServicePath}".format({
            ServerIP: ServerIP,
            GeometryServicePath: GeometryServicePath
        });
    }
}

function GetPrintTaskUrl() {
    if (portNo)
        return "http://{ServerIP}:{portNo}/arcgis/rest/services/{printTaskServiePath}".format({
            ServerIP: ServerIP,
            portNo: portNo,
            printTaskServiePath: printTaskServiePath
        });
    else {
        return "http://{ServerIP}/arcgis/rest/services/{printTaskServiePath}".format({
            ServerIP: ServerIP,
            printTaskServiePath: printTaskServiePath
        });
    }
}

function getServicesIcons(item) {
    if (!item.id) {
        return item.text;
    } else {
        var $service = $('<span> <img src="img/icons/service_{code}.svg" /> {text}</span>'.format({
            code: item.element.value.replace('string:', ''),
            text: item.text
        }));
        return $service;
    }
}

var currentTab;
function openIndicatorResultPanel() {
    var tab = $('.side-navi-item.item2');
    if (!SideNavi.isOpen()) {
        SideNavi.setEventParam(tab);
        SideNavi.slide();
        currentTab = tab;
    }
    if(currentTab.selector != ".side-navi-item.item2"){
        currentTab = tab;
        SideNavi.setEventParam(tab);
    }
}

function openSearchResultsPanel() {
    var tab = $('.side-navi-item.item1');
    if (!SideNavi.isOpen()) {
        SideNavi.setEventParam(tab);
        SideNavi.slide();
        currentTab = tab;
    }
    if(currentTab.selector != ".side-navi-item.item1"){
        currentTab = tab;
        SideNavi.setEventParam(tab);
    }
}

function isFunction(fnObj) {
    if (typeof fnObj === "function") {
        return true;
    } else {
        return false;
    }
}

Object.byString = function (o, s) {
    s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
    s = s.replace(/^\./, '');           // strip a leading dot
    var a = s.split('.');
    for (var i = 0, n = a.length; i < n; ++i) {
        var k = a[i];
        if (k in o) {
            o = o[k];
        } else {
            return;
        }
    }
    return o;
}

Object.stringGenerator = function (str, value) {
    var strArr = str.split('.');
    var obj = {};
    var i = 0;
    for (var i = 0; i < strArr.length; i++) {
        if (i == 0)
            obj[strArr[i]] = {};
        else
            obj[strArr[i - 1]][strArr[i]] = {};
    }
    if (value) {
        var length = strArr.length;
        if (strArr.length == 1) {
            obj[strArr[0]] = value;
        }
        else {
            obj[strArr[length - 2]][strArr[length - 1]] = value;
        }
    }
    return obj;
}

function setStringPathObjectValue(obj, strPath, value) {
    var o = Object.byString(obj, strPath);
    o = value;
}

function toRGBArray(strRGB) {
    var rgbArray;
    if (strRGB.indexOf('rgba') != -1) {
        rgbArray = strRGB.substring(5, strRGB.length - 1)
            .replace(/ /g, '')
            .split(',');
    } else {
        rgbArray = strRGB.substring(4, strRGB.length - 1)
            .replace(/ /g, '')
            .split(',');
    }
    rgbArray = _.map(rgbArray, function (strVal) {
        return parseFloat(strVal);
    });
    return rgbArray;
}


function calculateLineAngle(p1, p2){
    return Math.atan2(p2[0] - p1[0], p2[1] - p1[1]) * 180 / Math.PI;
}

function computeAngle(pointA, pointB){
    var dLon = (pointB[0] - pointA[0]) * Math.PI / 180;
    var lat1 = pointA[1] * Math.PI / 180;
    var lat2 = pointB[1] * Math.PI / 180;
    var y = Math.sin(dLon) * Math.cos(lat2);
    var x = Math.cos(lat1)*Math.sin(lat2) - Math.sin(lat1)*Math.cos(lat2)*Math.cos(dLon);
    var bearing = Math.atan2(y, x)  * 180 / Math.PI;
    bearing = ((bearing + 360) % 360).toFixed(1); //Converting -ve to +ve (0-360)
    return bearing - 90;
    if(bearing >= 0 && bearing < 90){
        return 'N' + (bearing != 0  ? bearing + 'E' : '');
    }
    if(bearing >= 90 && bearing < 180){
        return (bearing != 90  ? 'S' + (180 - bearing).toFixed(1) : '') + 'E';
    }
    if(bearing >= 180 && bearing < 270){
        return 'S' + (bearing != 180  ? (bearing - 180).toFixed(1) + 'W' : '');
    }
    if(bearing >= 270){
        return (bearing != 270  ? 'N' + (360 - bearing).toFixed(1) : '') + 'W';
    }
    return 'N';
}